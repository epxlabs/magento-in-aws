{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation: creates full Magento Setup with Autoscaling group, ELB, Cloudfront and so on",

  "Parameters" : {
    "TemplatesBucket" : {
      "Type" : "String",
      "Default" : "https://s3-us-west-2.amazonaws.com/epxlabs-magento-templates",
      "Description" : "Path to bucket with templates for setup",
      "ConstraintDescription" : "must be valid path to bucket with templates. Ex. https://s3-us-west-2.amazonaws.com/epxlabs-magento-templates"
    },

    "AZCount" : {
      "Description": "The number of availability zones to use for frontend servers",
      "Default": "1",
      "Type": "String",
      "AllowedValues": [ "1", "2", "3", "4", "5" ],
      "ConstraintDescription" : "must be valid value <= availability zones in region. Ex. 3. Try to check https://github.com/jsonmaur/aws-regions"
    },

    "Subnet2oct" : {
      "Description": "2 first octets of VPC Subnet",
      "Default": "10.0",
      "Type": "String",
      "ConstraintDescription" : "must be x.y Ex. 10.0"
    },

    "RemoteAccessCIDR": {
      "Description": "IP CIDR from where you could SSH to NATs",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "DB": {
      "Default": "ec2",
      "Description": "Select true/false to setup Auto Minor Version upgrade",
      "Type": "String",
      "AllowedValues": [ "ec2", "rds" ]
    },

    "DBAllocatedStorage": {
      "Default": "16",
      "Description": "The size of the database in gigabytes (GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "4096",
      "ConstraintDescription": "RDS only! must be between 5 and 4096 GB. If Iops specified, AllocatedStorage must be at least 100 GB and with minimum Iops value of 1000"
    },
    "DBAutoMinorVersionUpgrade": {
      "Default": "true",
      "Description": "Select true/false to setup Auto Minor Version upgrade",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "ConstraintDescription": "RDS only!"
    },
    "DBBackupRetentionPeriod": {
      "Type": "String",
      "Default": "7",
      "Description": "The number of days for which automatic DB snapshots are retained.",
      "ConstraintDescription": "RDS only!"
    },
    "DBInstanceClass": {
      "Default": "db.t2.medium",
      "Description": "The name of the compute and memory capacity class of the DB instance.",
      "Type": "String",
      "AllowedValues": [
        "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large",
        "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge",
        "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge"
      ],
      "ConstraintDescription": "Must select a valid database instance type."
    },
    "DBName": {
      "Default": "MagentoMySQLDB",
      "Description": "Name of the initial database for the MySQL RDS Instance.",
      "Type": "String",
      "MinLength": "5",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
    },
    "DBIops": {
      "Default": "1000",
      "Description": "DB Iops. Used only when io1 specified for the StorageType property",
      "Type": "Number",
      "AllowedValues": [ "1000", "2000", "3000", "4000", "5000", "6000", "7000", "8000", "9000", "10000" ],
      "ConstraintDescription": "RDS only! 1000 Iops min and increased in 1K increments. "
    },
    "DBMasterUsername": {
      "Default": "admin",
      "Description": "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBMasterUserPassword": {
      "Description": "The database admin account password. Must be at least 8 characters containing letters, numbers and symbols",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "32",
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho": "True"
    },
    "DBMultiAZ": {
      "Default": "true",
      "Description": "Specifies if the database instance is a multiple Availability Zone deployment.",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "ConstraintDescription": "RDS only!"
    },
    "DBStorageType": {
      "Default": "gp2",
      "Description": "The storage type associated with this database instance",
      "Type": "String",
      "AllowedValues": [ "standard", "gp2", "io1" ]
    },

    "MagentoReleaseMedia": {
      "Description": "Amazon S3 path to download magento .tar.gz file (s3://mybucket/magento-1.9.2.2.tar.gz)",
      "Default": "s3://epxlabs-magento/magento-1.9.3.0-2016-10-11-06-05-14.tar.gz",
      "Type": "String"
    },
    "MagentoSampleData": {
      "Description": "[ optional ] Amazon S3 path to download magento sample data file ((s3://mybucket/magento-sample-data.tar.gz)",
      "Default": "s3://epxlabs-magento/magento-sample-data-1.9.2.4-2016-10-11-07-38-13.tar.gz",
      "Type": "String"
    },

    "NotificationEmail": {
      "Description": "Email address to notify if there are any scaling operations [ optional]",
      "Default": "",
      "Type": "String"
    },

    "WebServerInstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "g2.2xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "WebServerMinSize": {
      "Description": "The minimum number of EC2 instances in the Auto Scaling group of WebServers.",
      "Default": "1",
      "Type": "String",
      "AllowedValues": [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ]
    },
    "WebServerMaxSize": {
      "Description": "The maximum number of EC2 instances in the Auto Scaling group of WebServers.",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ]
    },
    "WebServerDesiredCapacity": {
      "Description": "The desired number of EC2 instances in the Auto Scaling group of WebServers before indicating CREATE_SUCCESS.",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ]
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "",
      "Description": "Name of an EC2 KeyPair. Your instances will launch with this KeyPair."
    },

    "BucketNamePrefix": {
      "Description": "Name of bucket to hold magento media assets",
      "Default": "magento",
      "Type": "String"
    },
    "ExistingIamInstanceProfile": {
      "Type": "String",
      "Default": "",
      "Description": "[Optional] Name or ARN of the instance profile associated with the IAM role for the WebServer instancesi (or default IAM role if epmty)"
    },

    "SSLCertificateId": {
      "Description": "The ARN of the SSL certificate to use for the webserver. [ optional]",
      "Default": "",
      "Type": "String"
    }
  },

  "Mappings" : {
    "RDSTypeToEC2" : {
      "db.t2.micro":    { "Name" : t2.micro" },
      "db.t2.small":    { "Name" : t2.small" },
      "db.t2.medium":   { "Name" : t2.medium" },
      "db.t2.large":    { "Name" : t2.large" },
      "db.r3.large":    { "Name" : r3.large" },
      "db.r3.xlarge":   { "Name" : r3.xlarge" },
      "db.r3.2xlarge":  { "Name" : r3.2xlarge" },
      "db.r3.4xlarge":  { "Name" : r3.4xlarge" },
      "db.r3.8xlarge":  { "Name" : r3.8xlarge" },
      "db.m4.large":    { "Name" : m4.large" },
      "db.m4.xlarge":   { "Name" : m4.xlarge" },
      "db.m4.2xlarge":  { "Name" : m4.2xlarge" },
      "db.m4.4xlarge":  { "Name" : m4.4xlarge" },
      "db.m4.10xlarge": { "Name" : m4.10xlarge" }
    }
  },

  "Conditions": {
    "AZCount5": { "Fn::Equals" : [ { "Ref" : "AZCount" }, "5" ] },
    "AZCount4": { "Fn::Or" : [ { "Fn::Equals" : [ { "Ref" : "AZCount" }, "4" ] }, { "Condition" : "AZCount5" } ] },
    "AZCount3": { "Fn::Or" : [ { "Fn::Equals" : [ { "Ref" : "AZCount" }, "3" ] }, { "Condition" : "AZCount4" } ] },
    "AZCount2": { "Fn::Or" : [ { "Fn::Equals" : [ { "Ref" : "AZCount" }, "2" ] }, { "Condition" : "AZCount3" } ] },

    "RDSmysql": { "Fn::Equals" : [ "rds", { "Ref" : "DB" } ] },
    "EC2mysql": { "Fn::Not" : [ "Condition" : "RDSmysql" ] }

  },

  "Resources" : {
    "VPCLayer01" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPCSubnet" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "0.0/16" ] ] },
          "VPCInternalDomainName" : "lab.int"
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/vpc.template" ] ] }
      }
    },

    "AZLayer01" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : [ "VPCLayer01" ],
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "PublicSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "0.0/24" ] ] },
          "PrivateSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "1.0/24" ] ] },
          "SubnetAZ" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
          "InternetGateway" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.InternetGateway" ] }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/az.template" ] ] }
      }
    },

    "AZLayer02" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition" : "AZCount2",
      "DependsOn" : [ "VPCLayer01" ],
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "PublicSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "2.0/24" ] ] },
          "PrivateSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "3.0/24" ] ] },
          "SubnetAZ" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
          "InternetGateway" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.InternetGateway" ] }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/az.template" ] ] }
      }
    },

    "AZLayer03" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition" : "AZCount3",
      "DependsOn" : [ "VPCLayer01" ],
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "PublicSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "4.0/24" ] ] },
          "PrivateSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "5.0/24" ] ] },
          "SubnetAZ" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
          "InternetGateway" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.InternetGateway" ] }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/az.template" ] ] }
      }
    },

    "AZLayer04" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition" : "AZCount4",
      "DependsOn" : [ "VPCLayer01" ],
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "PublicSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "6.0/24" ] ] },
          "PrivateSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "7.0/24" ] ] },
          "SubnetAZ" : { "Fn::Select" : [ "3", { "Fn::GetAZs" : "" } ] },
          "InternetGateway" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.InternetGateway" ] }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/az.template" ] ] }
      }
    },

    "AZLayer05" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition" : "AZCount5",
      "DependsOn" : [ "VPCLayer01" ],
      "Properties" : {
        "Parameters" : {
          "Deploy" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "PublicSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "8.0/24" ] ] },
          "PrivateSubnetRange" : { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "9.0/24" ] ] },
          "SubnetAZ" : { "Fn::Select" : [ "4", { "Fn::GetAZs" : "" } ] },
          "InternetGateway" : { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.InternetGateway" ] }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/az.template" ] ] }
      }
    },

    "BastionAtPublicSubnetAZLayer01" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : [ "AZLayer01" ],
      "Properties" : {
        "Parameters" : {
          "EC2Subnet" : { "Fn::GetAtt" : [ "AZLayer01", "Outputs.PublicSubnet" ] },
          "needPublic" : "true",
          "needElastic" : "true",
          "InstanceType" : "t2.small",
          "EC2SecurityGroupIds" : [ { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.DefaultSecurityGroup" ] } ],
          "KeyPairName" : { "Ref" : "KeyName" }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/ec2.template" ] ] }
      }
    },

    "MySQLSecurityGroup0": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to MySQL Port",
        "VpcId": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
        "SecurityGroupIngress": [ { "IpProtocol": "tcp", "FromPort": "3306", "ToPort": "3306", "CidrIp": { "Fn::Join" : [ ".", [ { "Ref" : "Subnet2oct" }, "0.0/16" ] ] } } ]
      }
    },

    "EC2MySQL": {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : [ "AZLayer01" ],
      "Condition" : "EC2mysql",
      "Properties" : {
        "Parameters" : {
          "EC2Subnet" : { "Fn::GetAtt" : [ "AZLayer01", "Outputs.PublicSubnet" ] },
          "InstanceType" : { "Fn::FindInMap" : [ "RDSTypeToEC2", { "Ref" : "DBInstanceClass" }, "Name" ] },
          "EC2SecurityGroupIds" : [ { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.DefaultSecurityGroup" ] } ],
          "KeyPairName" : { "Ref" : "KeyName" }
        },
        "TemplateURL" : { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/ec2mysql.template" ] ] }
      }
    },

    "RDSMySQL": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition" : "RDSmysql",
      "Properties": {
        "TemplateURL": { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/rdsmysql.template" ] ] },
        "Parameters": {
          "VPC": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "AutoScaledInstanceSecurityGroup": { "Ref": "MySQLSecurityGroup0" },
          "Subnets": { "Fn::Join": [ ",", [ { "Fn::GetAtt" : [ "AZLayer01", "Outputs.PublicSubnet" ] },
                                            { "Fn::If" : [ "AZCount2", { "Fn::GetAtt" : [ "AZLayer02", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount3", { "Fn::GetAtt" : [ "AZLayer03", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount4", { "Fn::GetAtt" : [ "AZLayer04", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount5", { "Fn::GetAtt" : [ "AZLayer05", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] }
                                   ] ] },
          "DBAllocatedStorage": { "Ref": "DBAllocatedStorage" },
          "DBAutoMinorVersionUpgrade": { "Ref": "DBAutoMinorVersionUpgrade" },
          "DBBackupRetentionPeriod": { "Ref": "DBBackupRetentionPeriod" },
          "DBInstanceClass": { "Ref": "DBInstanceClass" },
          "DBName": { "Ref": "DBName" },
          "DBIops": { "Ref": "DBIops" },
          "DBMasterUsername": { "Ref": "DBMasterUsername" },
          "DBMasterUserPassword": { "Ref": "DBMasterUserPassword" },
          "DBMultiAZ": { "Ref": "DBMultiAZ" },
          "DBPubliclyAccessible": "false",
          "DBStorageType": { "Ref": "DBStorageType" }
        }
      }
    },

    "ElasticLoadBalancerSecurityGroup0": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP/HTTPS access on port 80 and 443",
        "VpcId": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },

    "AutoScaledInstanceSecurityGroup0": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
        "VpcId": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Ref": "ElasticLoadBalancerSecurityGroup0" } },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "ElasticLoadBalancerSecurityGroup0" } }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "3306", "ToPort": "3306", "SourceSecurityGroupId": { "Ref": "MySQLSecurityGroup0" } }
        ]
      }
    },
    "AutoScaledInstanceLoopSecurityGroup0": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable all communications within Auto Scaled instances",
        "VpcId": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
        "SecurityGroupIngress": [ { "IpProtocol": "-1", "FromPort": "1", "ToPort": "65535", "SourceSecurityGroupId": { "Ref": "AutoScaledInstanceSecurityGroup0" } } ]
      }
    },

    "WebServer": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": { "Fn::Join" : [ "", [ { "Ref" : "TemplatesBucket" }, "/nested/webserver.template" ] ] },
        "Parameters": {
          "VPC": { "Fn::GetAtt" : [ "VPCLayer01", "Outputs.VPC" ] },
          "WebServerInstanceType": { "Ref": "WebServerInstanceType" },
          "BucketNamePrefix": { "Ref": "BucketNamePrefix" },
          "NotificationEmail": { "Ref": "NotificationEmail" },
          "ElasticLoadBalancerSecurityGroup": { "Ref": "ElasticLoadBalancerSecurityGroup0" },
          "AutoScaledInstanceSecurityGroup": { "Ref": "AutoScaledInstanceSecurityGroup0" },
          "MagentoReleaseMedia": { "Ref": "MagentoReleaseMedia" },
          "MagentoSampleData": { "Ref": "MagentoSampleData" },
          "SSLCertificateId": { "Ref": "SSLCertificateId" },
          "WebServerMinSize": { "Ref": "WebServerMinSize" },
          "DBMasterUsername": { "Ref": "DBMasterUsername" },
          "DBMasterUserPassword": { "Ref": "DBMasterUserPassword" },
          "RDSMySQLStack": { "Fn::If" : [ "RDSmysql", { "Ref": "RDSMySQL" }, { "Ref": "EC2MySQL" } ] },
          "WebServerSubnets": { "Fn::Join": [ ",", [ { "Fn::GetAtt" : [ "AZLayer01", "Outputs.PrivateSubnet" ] },
                                            { "Fn::If" : [ "AZCount2", { "Fn::GetAtt" : [ "AZLayer02", "Outputs.PrivateSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount3", { "Fn::GetAtt" : [ "AZLayer03", "Outputs.PrivateSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount4", { "Fn::GetAtt" : [ "AZLayer04", "Outputs.PrivateSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount5", { "Fn::GetAtt" : [ "AZLayer05", "Outputs.PrivateSubnet" ] }, {"Ref" : "AWS::NoValue"} ] }
                                   ] ] },
          "ElasticLoadBalancerSubnets": { "Fn::Join": [ ",", [ { "Fn::GetAtt" : [ "AZLayer01", "Outputs.PublicSubnet" ] },
                                            { "Fn::If" : [ "AZCount2", { "Fn::GetAtt" : [ "AZLayer02", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount3", { "Fn::GetAtt" : [ "AZLayer03", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount4", { "Fn::GetAtt" : [ "AZLayer04", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] },
                                            { "Fn::If" : [ "AZCount5", { "Fn::GetAtt" : [ "AZLayer05", "Outputs.PublicSubnet" ] }, {"Ref" : "AWS::NoValue"} ] }
                                   ] ] },
          "WebServerMaxSize": { "Ref": "WebServerMaxSize" },
          "WebServerDesiredCapacity": { "Ref": "WebServerDesiredCapacity" },
          "KeyName": { "Ref": "KeyName" },
          "ExistingIamInstanceProfile": { "Ref": "ExistingIamInstanceProfile" },
          "RemoteAccessCIDR": { "Ref": "RemoteAccessCIDR" }
        }
      }
    }

  }
}

