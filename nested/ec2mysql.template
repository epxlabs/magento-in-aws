{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation: could create EC2 instance with Elastic IP or Public IP in public network, or without them in private.",

  "Parameters" : {

    "EC2Subnet" : {
      "Description" : "Subnet Id",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription" : "must be valid subnet"
    },

    "needPublic" : {
      "Description" : "Assign public ip to instance.",
      "Type" : "String",
      "Default" : "false",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must choose"
    },

    "needElastic" : {
      "Description" : "Assign Elastic ip to instance.",
      "Type" : "String",
      "Default" : "false",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must choose"
    },

    "needSourceDestCheck" : {
      "Description" : "Set source check destination.",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must choose"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues": [
        "t2.micro", "t2.small", "t2.medium", "t2.large",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "EC2Profile" : {
      "Description" : "Instance profile",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a valid instance profile name"
    },

    "EC2SecurityGroupIds": {
      "Description": "Security groups that can be used to access the EC2 instances",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "ConstraintDescription": "must be list of EC2 security group ids"
    },

    "KeyPairName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "Deploy" : {
      "Description" : "Deploy name which resources belong to",
      "Type" : "String",
      "ConstraintDescription" : "A literal string"
    },

    "DBName": {
      "Default": "MyDatabase",
      "Description": "Name of MySQL DB for Magento Stack",
      "Type": "String",
      "MinLength": "5",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
    },

    "DBUser": {
      "Default": "admin",
      "Description": "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Description": "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "64",
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "NoEcho": "True",
      "Default": "admin-12345",
      "ConstraintDescription": "Min 8 chars."
    }

  },

  "Mappings": {
    "RegionMap": {
        "ap-northeast-1":       { "AMI" : "ami-0c11b26d" },
        "ap-northeast-2":       { "AMI" : "ami-983ce8f6" },
        "ap-south-1":           { "AMI" : "ami-34b4c05b" },
        "ap-southeast-1":       { "AMI" : "ami-b953f2da" },
        "ap-southeast-2":       { "AMI" : "ami-db704cb8" },
        "eu-central-1":         { "AMI" : "ami-f9619996" },
        "eu-west-1":            { "AMI" : "ami-9398d3e0" },
        "sa-east-1":            { "AMI" : "ami-97831ffb" },
        "us-east-1":            { "AMI" : "ami-b73b63a0" },
        "us-east-2":            { "AMI" : "ami-58277d3d" },
        "us-west-1":            { "AMI" : "ami-23e8a343" },
        "us-west-2":            { "AMI" : "ami-5ec1673e" }
    }
  },

  "Conditions" : {
    "assignPublic" : { "Fn::Equals" : [ { "Ref" : "needPublic" }, "true" ] },
    "assignElastic" : { "Fn::Equals" : [ { "Ref" : "needElastic" }, "true" ] },
    "privateInstance" : {
      "Fn::Not" : [{
        "Fn::Or" : [
          { "Condition": "assignPublic" },
          { "Condition": "assignElastic" }
        ]
      }]
    },
    "publicInstance" : {
      "Fn::Not": [{ "Condition": "privateInstance" }]
    },
    "useIamInstanceProfile" : {"Fn::Not": [ {"Fn::Equals" : [{"Ref" : "EC2Profile"}, ""]} ]}
  },

  "Resources" : {

    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ]
          },

          "Install" : {
            "packages" : {
              "yum" : {
                "mysql"        : [],
                "mysql-server" : [],
                "mysql-libs"   : []
              }
            },

            "files" : {
              "/tmp/setup.mysql" : {
                "content" : { "Fn::Join" : ["", [
                  "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
                  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUser" }, "'@'%' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource EC2Instance ",
                  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "mysqld"  : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },

          "Configure" : {
            "commands" : {
              "01_set_mysql_root_password" : {
                "command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBPassword" }, "'"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              },
              "02_create_database" : {
                "command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBPassword" }, "' < /tmp/setup.mysql"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName"  : { "Ref" : "KeyPairName" },
        "SourceDestCheck" : { "Ref" : "needSourceDestCheck" },
        "IamInstanceProfile": { "Fn::If" : [ "useIamInstanceProfile", { "Ref" : "EC2Profile" }, { "Ref" : "AWS::NoValue" } ] },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : { "Ref" : "EC2SecurityGroupIds" },
          "AssociatePublicIpAddress" : { "Fn::If" : [ "assignPublic", "true", "false" ]},
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "EC2Subnet" }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "Deploy" } }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource EC2Instance ",
             "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource EC2Instance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },

    "ElasticIP": {
      "Condition" : "assignElastic",
      "Type": "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "EIPAssociation": {
      "Type": "AWS::EC2::EIPAssociation",
      "Condition" : "assignElastic",
      "Properties": {
        "InstanceId": {
          "Ref": "EC2Instance"
        },
        "AllocationId": { "Fn::GetAtt" : [ "ElasticIP", "AllocationId" ]}
      }
    }

  },

  "Outputs" : {
    "MySQLEndPoints": {
      "Description": "MySQL Endpoint to connect",
      "Value": { "Fn::Join": [ "", [ { "Fn::GetAtt": [ "EC2Instance", "PrivateDnsName" ] }, ":3306/", { "Ref": "DBName" } ] ] }
    },
    "DBName": {
      "Description": "MySQL DBName",
      "Value": { "Ref": "DBName" }
    },
    "MySQLEndPointAddress": {
      "Description": "MySQL Endpoint to connect",
      "Value": { "Fn::GetAtt": [ "EC2Instance", "PrivateDnsName" ] }
    },
    "MySQLEndPointPort": {
      "Description": "MySQL Endpoint to connect",
      "Value": "3306"
    }
  }
}
